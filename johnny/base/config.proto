// -*- mode: protobuf -*-
// Configuration for Johnny.
//
// This schema is designed for input to the application that contains account
// configuration setups and manual clusterings for trades (it is not always
// possible to split logical trades correctly automatically in the same
// account).
//
//   Copyright (C) 2021  Martin Blais
//   License: GNU GPLv2

syntax = "proto2";

package johnny;

// Configuration for returns script.
message Config {
  // The list of accounts and their nicknames. Only the nicknames are used in
  // the outputs, for privacy, in case you're sharing with others.
  repeated Account accounts = 1;

  // A list of manually disambiguated trades and their annotations.
  repeated Chain chains = 2;

  // Explicitly linked transactions or orders. These lists can be used to join
  // together pairs that would otherwise be resolved to independent chains.
  repeated Link transaction_links = 3;
  repeated Link order_links = 4;
}

// An explicit linkage between multiple transactions.
message Link {
  optional string comment = 1;
  repeated string ids = 2;
}

// The declaration of an account.
// Only declared accounts are ingested.
message Account {
  // Account number.
  optional string number = 1;

  // A short and unique nickname or alias for the account. This should be
  // something you don't mind sharing publicly.
  optional string nickname = 2;
}

// A trade chain.
message Chain {
  // The chain id of a trade. This is a unique string computed in the front end.
  optional string chain_id = 1;

  // User-associated trade type.
  optional string trade_type = 2;

  // User-provided description. Free-form, may span multiple lines (include
  // newlines).
  optional string comment = 3;

  // If this is present, an explicit list of transaction ids that are part of
  // the trade. All the rows matching these transactions will be automatically
  // removed from the table and extracted as a unique chain. Make sure that
  // matches without these trades can resolve.
  repeated string transaction_ids = 4;
}

// Declaration of asset vs. asset-class mapping.
message Asset {
  // Normalized instrument name.
  optional string instrument = 1;

  // Corresponding asset class, e.g. "EquityIndex", "Metals", "Rates", "Ags",
  // "Currencies", "Energy".
  optional string class = 2;

  // Factor. This is typically a sub-category of asset class. For example, asset
  // class would be "Metals", and factor might be "Copper" for FCX, COPX and
  // /HG.
  optional string factor = 3;
}
